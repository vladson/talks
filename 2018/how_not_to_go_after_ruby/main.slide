How not to Ruby on Go
06 October 2018

Vladislav Bogomolov
Backend Developer, Gett RnD
bogomolov@gett.com
https://engineering.gett.com/
http://github.com/vladson
@vladson4ik

* Why Go?

.image images/gopher_sneaking.png _ 300
.caption гофер (кродеться)
.background images/background.png

* Common Ruby way

- convention over configuration
- easy to write, easy to read
- lots of code, dictate of Rails

.background images/background.png  

* Common Go way?


.background images/background.png

- explicit over implicit
- simple is better that complex

* Questions and decisions to make

.background images/background.png

- How to split responsibilities?
- How to structure your app
- What ORM should I use if any?
- How to handle Exceptions?
- What to do with logging?  
- Should I use any framework?

* How to split responsibilities?

.background images/background.png

Nobody knows, btw, but common practices present.

How it's done in Ruby?
.image images/abstractionsEverywhere.jpg _ 600

* How to split responsibilities?

.background images/background.png

.code code/package.go  /START OMIT/,/END OMIT/
Don't do it!

- keep track of packages
- Your code should reside in corresponding packages

* How to structure your app

.background images/background.png
.image images/house-of-cards.jpg 500 _

* How to structure your app

.background images/background.png

- MVC with corresponding layered structure is not usefull for Go
- DDD rules

- GoWay fest 2018 - Kat Zién: [[https://github.com/katzien/talks/blob/master/how-do-you-structure-your-go-apps/gowayfest2.0-2018-09-28/slides.pdf][How do you structure your Go apps?]]

* What ORM should I use if any?

.background images/background.png
 
How it's done in Ruby?
 
 class User < Activerecord::Base
 ...
 User.find
 User.save
 ...

- lots of implicit stuff
- lots of abstractions
- mix of responsibility

* Do you need them in Go?

.background images/background.png

In many cases you need no ORM, just _"database/sql"_ package

.code code/plain_sql.go  /START OMIT/,/END OMIT/

* Existing ORMS

.background images/background.png
- [[https://github.com/jinzhu/gorm][Gorm]]
Activerecord like ORM,
problems:
- mix of responsibility
- unpredictable behaviour
- usage of _interface{}_ values
- no migrations

- [[https://github.com/go-reform/reform][Reform]] 
Code-generation based approach, thus provides usable interface. Data Mapper pattern. 

problems:
- mostly no problems
- unless you have some
- no migrations 


* Migrations

.background images/background.png
- No common techniques

- In Gett we use Swan, based on [[https://bitbucket.org/liamstask/goose] Goose]

1. File based migrations
2. Dangerous migrations warning
3. Support concurrent indices 

 BEGIN;
 CREATE INDEX CONCURRENTLY idx ON  table_name (field0, field1);
 COMMIT;
 
* How to handle Exceptions?

.background images/background.png

* What to do with logging?  

.background images/background.png

* Should I use any framework?

.background images/background.png

* 

.background images/background.png


* Exceptions?
Обработка ошибок. Явно, часть логики, не эксепшены.

* Логирование
Логирование. Ну можно, конечно. Структура. Поля. Пробрасывать дальше.

* Тестирование

- rspec?
- minitest?

 рспек? Простые, чистые тесты. Которые понятно как гонять. 

 - 
* масса кода который порождает массу кода

пример из Gls 

* использовать неявные неэкосистемные решения
 

 